# Generated by Django 3.2.9 on 2022-03-12 12:52
from django.contrib.postgres.search import SearchVector
from django.db import migrations

def compute_search_vector(apps, schema_editor):
    Product = apps.get_model("search", "Product")
    vector = SearchVector("name", weight="A") + SearchVector("description", weight="C")
    Product.objects.update(search_vector=vector)

class Migration(migrations.Migration):

    dependencies = [
        ('search', '0036_auto_20220312_1252'),
    ]

    operations = [
        migrations.RunSQL(
            # sql="""
            #     CREATE TRIGGER search_vector_trigger
            #     BEFORE INSERT OR UPDATE OF name, description, search_vector
            #     ON search_product
            #     FOR EACH ROW EXECUTE PROCEDURE
            #     tsvector_update_trigger(
            #         search_vector, 'pg_catalog.english', name, description
            #     );
            #     UPDATE search_product SET search_vector = NULL;
            #     """,
            sql="""
                CREATE FUNCTION products_trigger() RETURNS trigger AS $$
                begin
                  new.search_vector :=
                     setweight(to_tsvector('pg_catalog.english', coalesce(new.name,'')), 'A') ||
                     setweight(to_tsvector('pg_catalog.english', coalesce(new.description,'')), 'C');
                  return new;
                end
                $$ LANGUAGE plpgsql;
                
                CREATE TRIGGER search_vector_trigger BEFORE INSERT OR UPDATE
                    ON search_product FOR EACH ROW EXECUTE PROCEDURE products_trigger();
                UPDATE search_product SET search_vector = NULL;
            """,
            reverse_sql="""
                DROP TRIGGER IF EXISTS search_vector_trigger
                ON search_product;
                """,
        ),
        migrations.RunPython(
            compute_search_vector, reverse_code=migrations.RunPython.noop
        ),
    ]
